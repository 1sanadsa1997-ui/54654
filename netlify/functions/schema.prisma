generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  fullName      String
  role          UserRole  @default(USER)
  level         Int       @default(0)
  isApproved    Boolean   @default(false)
  isSuspended   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  wallet          Wallet?
  referrals       Referral[]      @relation("Referrer")
  referredBy      Referral?       @relation("Referred")
  withdrawals     Withdrawal[]
  userTasks       UserTask[]
  transactions    Transaction[]

  @@index([email])
  @@index([username])
  @@index([role])
}

model Wallet {
  id              String   @id @default(cuid())
  userId          String   @unique
  balance         Decimal  @default(0) @db.Decimal(10, 2)
  pendingBalance  Decimal  @default(0) @db.Decimal(10, 2)
  totalEarned     Decimal  @default(0) @db.Decimal(10, 2)
  totalWithdrawn  Decimal  @default(0) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        String
  amount      Decimal         @db.Decimal(10, 2)
  description String
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Task {
  id                  String     @id @default(cuid())
  title               String
  description         String     @db.Text
  type                String
  reward              Decimal    @db.Decimal(10, 2)
  instructions        String?    @db.Text
  url                 String?
  proofRequired       Boolean    @default(true)
  status              String     @default("ACTIVE")
  maxParticipants     Int?
  currentParticipants Int        @default(0)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  userTasks UserTask[]

  @@index([type])
  @@index([status])
}

model UserTask {
  id          String      @id @default(cuid())
  userId      String
  taskId      String
  status      String      @default("PENDING")
  reward      Decimal     @db.Decimal(10, 2)
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([status])
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String   @unique
  level      Int
  bonus      Decimal  @db.Decimal(10, 2)
  isPaid     Boolean  @default(false)
  createdAt  DateTime @default(now())

  referrer User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred User @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)

  @@index([referrerId])
  @@index([referredId])
}

model Withdrawal {
  id              String           @id @default(cuid())
  userId          String
  amount          Decimal          @db.Decimal(10, 2)
  usdtAmount      Decimal          @db.Decimal(10, 2)
  conversionRate  Decimal          @db.Decimal(10, 4)
  walletAddress   String
  network         String
  status          String           @default("PENDING")
  txHash          String?
  rejectionReason String?          @db.Text
  processedBy     String?
  processedAt     DateTime?
  createdAt       DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}